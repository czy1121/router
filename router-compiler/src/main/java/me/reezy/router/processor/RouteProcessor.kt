package me.reezy.router.processor

import com.google.auto.service.AutoService
import com.squareup.kotlinpoet.*
import me.reezy.router.annotation.Route
import java.io.File
import javax.annotation.processing.*
import javax.lang.model.SourceVersion
import javax.lang.model.element.TypeElement
import javax.lang.model.util.Elements
import javax.lang.model.util.Types

private const val WARNINGS = """
   ***************************************************
   * THIS CODE IS GENERATED BY Router, DO NOT EDIT.  *
   ***************************************************
"""


private const val PKG = "me.reezy.router"
private const val PKG_GEN = "$PKG.generated"
private const val PKG_ANN = "$PKG.annotation"

@AutoService(Processor::class)
@SupportedOptions("moduleName")
@SupportedSourceVersion(SourceVersion.RELEASE_8)
@SupportedAnnotationTypes(value = ["$PKG_ANN.Route"])
class RouteProcessor : AbstractProcessor() {



    private val routes = mutableSetOf<String>()

    protected lateinit var mElements: Elements
    protected lateinit var mTypes: Types
    protected lateinit var mLogger: Logger
    protected lateinit var mFormattedModuleName: String
    protected lateinit var mOriginalModuleName: String

    override fun init(env: ProcessingEnvironment) {
        super.init(env)
        mElements = env.elementUtils
        mTypes = env.typeUtils
        mLogger = Logger(env.messager, PKG)

        val options = env.options
        if (options.isNotEmpty()) {
            mOriginalModuleName = options["moduleName"] ?: ""
            mFormattedModuleName = mOriginalModuleName.replace("[^0-9a-zA-Z_]+".toRegex(), "")
        }
        mLogger.info("[$mOriginalModuleName] ${this::class.java.simpleName} init")
    }

    override fun process(set: MutableSet<out TypeElement>, roundEnv: RoundEnvironment): Boolean {

        if (set.isEmpty()) {
            return false
        }

        if (mOriginalModuleName.isBlank()) {
            mLogger.warning("this module name is null!!! skip this module!!")
            return false
        }

        try {
            mLogger.info("[$mOriginalModuleName] ${this::class.java.simpleName} process!!!")
            generate(roundEnv)
        } catch (e: Exception) {
            mLogger.error(e)
        }

        return true
    }

    private fun FileSpec.writeFile() {

        val outputFile = File(processingEnv.options["kapt.kotlin.generated"])
        outputFile.mkdirs()
        writeTo(outputFile.toPath())
    }


    private fun generate(roundEnv: RoundEnvironment) {
        routes.clear()
        val elements = roundEnv.getElementsAnnotatedWith(Route::class.java)
        if (elements.isEmpty()) {
            return
        }
        mLogger.info("Found ${elements.size} routes in [$mOriginalModuleName]")

        val tmActivity = mElements.getTypeElement("android.app.Activity").asType()
        val tmHandler = mElements.getTypeElement("$PKG.RouteCall").asType()
//        val tmRouter = mElements.getTypeElement("$PKG.Router").asType()
        val tmRouteTable = mElements.getTypeElement("$PKG.internal.RouteTable").asType()

        val funcSpec = FunSpec.builder("load").addParameter("rt", tmRouteTable.asTypeName())

        elements.forEach {
            val annotation = it.getAnnotation(Route::class.java)
//            val paths = arrayOf(annotation.value) + annotation.routes

            val paths = (arrayOf(annotation.value) + annotation.routes).filter { path ->
                if (path.isEmpty()) {
//                    mLogger.info("The route path is empty, so skip ${it.asType()}")
                    return@filter false
                }
                if (routes.contains(path)) {
                    mLogger.warning("The route path $path already exists, so skip ${it.asType()}")
                    return@filter false
                }
                return@filter true
            }.toTypedArray()

            if (paths.isEmpty()) {
                mLogger.info("The route paths is empty, so skip ${it.asType()}")
                return@forEach
            }

            if (mTypes.isSubtype(it.asType(), tmActivity) || mTypes.isSubtype(it.asType(), tmHandler)) {
                mLogger.info("Found ${it.asType()}")

                routes.addAll(paths)
                funcSpec.addStatement("rt.add(%T::class.java, %L, %L, %L)", it.asType(), paths.format(), annotation.interceptors.format(), annotation.flags)

            } else {
                mLogger.info("Unknown route type, so skip ${it.asType()}")
            }
        }

        val typeSpec = TypeSpec.classBuilder("RouteLoader_$mFormattedModuleName")
                .addKdoc(WARNINGS)
                .addFunction(funcSpec.build())
                .build()

        val kotlinFile = FileSpec.builder(PKG_GEN, "RouteLoader_$mFormattedModuleName")
                .addType(typeSpec)
                .build()

        kotlinFile.writeFile()
    }

    private fun Array<String>.format(): String {
        if (isEmpty()) {
            return "null"
        }
        return joinToString("\", \"", "arrayOf(\"", "\")")
    }
}




